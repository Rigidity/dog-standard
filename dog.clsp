; Asserts that the parent is a dog launcher
; Creates 0 amount launchers as an output
; Has an actual amount, but uses a flash loan

(mod (
    MOD_HASH
    LAUNCHER_SELF_HASH
    INNER_PUZZLE
    (parent_inner_puzzle_hash . parent_amount) ; launcher proof
    inner_solution
    next_coin_delta
    prev_coin_delta
    prev_coin_id
    (next_coin_parent_id next_coin_inner_puzzle_hash . next_coin_amount) ; next_coin_proof
    my_amount
)
    (include curry.clib)
    (include condition_codes.clib)

    (defconstant ANNOUNCEMENT_PREFIX 0xd0)

    (defun-inline launcher_coin_puzzle_hash (MOD_HASH LAUNCHER_SELF_HASH inner_puzzle_hash amount)
        (curry_hashes LAUNCHER_SELF_HASH
            (sha256 1 LAUNCHER_SELF_HASH)
            (sha256 1 MOD_HASH)
            (sha256 1 amount)
            (sha256 1 inner_puzzle_hash)
        )
    )

    (defun create_launcher_coin (MOD_HASH LAUNCHER_SELF_HASH (inner_puzzle_hash amount . rest))
        (c CREATE_COIN (c
            (launcher_coin_puzzle_hash MOD_HASH LAUNCHER_SELF_HASH inner_puzzle_hash amount)
            (c 0 rest)
        ))
    )strlen

    (defun wrap_conditions (MOD_HASH LAUNCHER_SELF_HASH conditions remaining_amount)
        (if conditions
            (if (= (f (f conditions)) CREATE_COIN)
                (c
                    (create_launcher_coin MOD_HASH LAUNCHER_SELF_HASH (r (f conditions)))
                    (wrap_conditions MOD_HASH LAUNCHER_SELF_HASH (r conditions) (- remaining_amount (f (r (f conditions)))))
                )
                (if (all
                    (any (= (f (f conditions)) RECEIVE_MESSAGE) (= (f (f conditions)) SEND_MESSAGE))
                    (= (f (r (f conditions))) 63)
                    (= (strlen (f (r (r (f conditions))))) 33)
                    (= (substr (f (r (r (f conditions)))) 0 1) ANNOUNCEMENT_PREFIX)
                )
                    (x)
                    ; else
                    (c (f conditions) (wrap_conditions MOD_HASH LAUNCHER_SELF_HASH (r conditions) remaining_amount))
                )
            )
            (if (= delta 0) () (x))
        )
    )

    (defun-inline create_ring (conditions)
        (c
            (list SEND_MESSAGE
                63 ; coin-coin
                (concat ANNOUNCEMENT_PREFIX (sha256 next_coin_delta))
                (coin_id
                    next_coin_parent_id
                    (curry_hashes MOD_HASH
                        (sha256 1 MOD_HASH)
                        (sha256 1 LAUNCHER_SELF_HASH)
                        next_coin_inner_puzzle_hash
                    )
                    next_coin_amount
                )
            )
            (c
                (list RECEIVE_MESSAGE
                    63 ; coin-coin
                    (concat ANNOUNCEMENT_PREFIX (sha256 prev_coin_delta))
                    prev_coin_id
                )
                conditions
            )
        )
    )

    (defun-inline main (inner_conditions my_amount)
        (c
            (list RECEIVE_MESSAGE
                20 ; puzzle hash (sender) -> parent (receiver - this coin)
                my_amount
                (launcher_coin_puzzle_hash MOD_HASH LAUNCHER_SELF_HASH (list parent_inner_puzzle_hash parent_amount))
            )
            (create_ring
                (wrap_conditions
                    MOD_HASH LAUNCHER_SELF_HASH
                    (a INNER_PUZZLE inner_solution)
                    (- (+ my_amount prev_coin_delta) next_coin_delta)
                )
            )
        )
    )

    (main
        (wrap_conditions MOD_HASH LAUNCHER_SELF_HASH (a INNER_PUZZLE inner_solution) (+ prev_coin_delta my_amount))
        my_amount
    )
)
